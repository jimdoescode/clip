#!/usr/bin/env php
<?php namespace Clip;

/**
 * Copyright (c) 2012 Jim Saunders <jim@jimsaunders.net>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is furnished
 * to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

class Clip
{
    /**
     * @var array All loaded commands
     */
    static $commands = array();

    /**
     * Loads the commands into an array.
     */
    public static function load()
    {
        //Move to the directory where the command resides
        $dir = __DIR__.'/'.Config::main('directory');

        array_map(function($command) use($dir)
        {
            if($command !== '.' && $command !== '..')
            {
                include("{$dir}/{$command}");
                $command = substr($command, 0, -4);
                if(class_exists($command, false))
                {
                    $obj = new $command;
                    if($obj instanceof Command)
                        Clip::$commands[$command] = $obj;
                }
            }

        }, scandir($dir));
    }

    /**
     * Outputs the help text.
     */
    public static function help()
    {
        echo Config::main('help_text');
        foreach(self::$commands as $key => $ignored)
            echo " - {$key}\r\n";
        echo PHP_EOL;

        return 0;
    }

    /**
     * Executes the command specified by the name with the
     * additional params
     *
     * @param string $name
     * @param array $params
     */
    public static function fire($name, array $params)
    {
        $converted = array();
        foreach($params as $key => $param)
        {
            //Convert foo=bar params into key value pairs
            $segs = explode('=', $param);
            if(count($segs) > 1)
                $converted[trim($segs[0])] = trim($segs[1]);
            else
                $converted[$key] = $param;
        }
        //If the command exists or is a help command run
        //it otherwise display the general help text
        if(array_key_exists($name, self::$commands))
            return self::$commands[$name]->run($converted);
        elseif($name === 'help' && array_key_exists($params[0], self::$commands))
            self::$commands[$params[0]]->help();
        else
            self::help();

        return 0;
    }
}

class Config
{
    static $files = array();
    public static function __callStatic($name, $params)
    {
        if(!array_key_exists($name, self::$files))
            self::$files[$name] = require_once(__DIR__."/config/{$name}.php");

        if(!empty($params))
        {
            $values = self::$files[$name];
            $result = array();
            foreach($params as $param)
                $result[] = $values[$param];

            return count($result) > 1 ? $result : $result[0];
        }
        return self::$files[$name];
    }
}

/**
 * Implement this interface for any command you want recognized by clip
 */
interface Command
{
    /**
     * This method should echo out any helpful
     * information relating to the command.
     */
    public function help();

    /**
     * This method will be executed when the
     * command is called. Passing any additional
     * parameters to the command.
     *
     * @param array $params additional parameters passed to the command.
     * @return int 0 on success or an error code
     */
    public function run(array $params);
}

function render($text)
{
    $colors = Config::colors();
    $names = strtoupper(implode('|',array_keys($colors)));
    preg_match_all("#(\[({$names})\]).*?(\[\/({$names})\])#", $text, $matches);

    $replacements = $matches[1];
    $selections = $matches[2];
    $resets = $matches[3];

    if(!empty($replacements) && !empty($selections) && !empty($resets))
    {
        $replacements = array_unique($replacements);
        $selections = array_unique($selections);

        foreach($replacements as $index => $replacement)
        {
            $color = strtolower($selections[$index]);
            if(array_key_exists($color, $colors))
                $text = str_ireplace($replacement, $colors[$color], $text);
        }
        $text = str_ireplace($resets, $colors['reset'], $text);
    }
    echo $text;
}

//Load all the commands into Clip
Clip::load();

$offset = 2; //Accounts for script name and command name to determine parameters
return $argc < $offset ? Clip::help() : Clip::fire($argv[$offset-1], array_slice($argv, $offset));
